#+TITLE: Starter Kit Defuns
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* The starter-kit-coding-hook:
A single hook holding those functions which should be run in *every*
code buffer.

We have a number of turn-on-* functions since it's advised that lambda
functions not go in hooks. Repeatedly evaling an add-to-list with a
hook value will repeatedly add it since there's no way to ensure that
a lambda doesn't already exist in the list.

#+name: starter-kit-hook-functions
#+begin_src emacs-lisp
(defun starter-kit-local-column-number-mode ()
  (make-local-variable 'column-number-mode)
  (column-number-mode t))

(defun starter-kit-local-comment-auto-fill ()
  (set (make-local-variable 'comment-auto-fill-only-comments) t)
  (auto-fill-mode t))

(defun starter-kit-turn-on-save-place-mode ()
  (setq save-place t))

(defun starter-kit-turn-on-whitespace ()
  (whitespace-mode t))
#+end_src

** Defunkt Functions
#+BEGIN_SRC emacs-lisp
  ;; Better versions of kill-word and backward-kill-word.
  (defun defunkt-kill-word (arg)
    "Special version of kill-word which swallows spaces separate from words"
    (interactive "p")

    (let ((whitespace-regexp "\\s-+"))
      (kill-region (point)
                   (cond
                    ((looking-at whitespace-regexp) (re-search-forward whitespace-regexp) (point))
                    ((looking-at "\n") (kill-line) (defunkt-kill-word arg))
                    (t (forward-word arg) (point))))))

  (defun defunkt-backward-kill-word (arg)
    "Special version of backward-kill-word which swallows spaces separate from words"
    (interactive "p")
    (if (bolp)
        (backward-delete-char 1)
      (if (string-match "^\\s-+$" (buffer-substring (point-at-bol) (point)))
          (kill-region (point-at-bol) (point))
        (backward-kill-word 1))))

(defun textmate-next-line ()
  "Inserts an indented newline after the current line and moves the point to it."
  (interactive)
  (end-of-line)
  (newline-and-indent))

  ; duplicate the current line
  (defun defunkt-duplicate-line ()
    (interactive)
      (beginning-of-line)
      (copy-region-as-kill (point) (progn (end-of-line) (point)))
      (textmate-next-line)
      (yank)
      (beginning-of-line)
      (indent-according-to-mode))
#+END_SRC
#+name: starter-kit-add-local-column-number-mode
#+begin_src emacs-lisp
(add-hook 'starter-kit-coding-hook 'starter-kit-local-column-number-mode)
#+end_src

#+name: start-kit-add-local-comment-auto-fill
#+begin_src emacs-lisp
(add-hook 'starter-kit-coding-hook 'starter-kit-local-comment-auto-fill)
#+end_src

#+name: starter-kit-add-pretty-lambdas
#+begin_src emacs-lisp
  (when (window-system)
    (add-hook 'starter-kit-coding-hook 'starter-kit-pretty-lambdas))
#+end_src

#+name: starter-kit-run-starter-kit-coding-hook
#+begin_src emacs-lisp
(defun run-starter-kit-coding-hook ()
  "Enable things that are convenient across all coding buffers."
  (run-hooks 'starter-kit-coding-hook))
#+end_src

#+srcname: starter-kit-recentf-ido-find-file
#+begin_src emacs-lisp
  (defun recentf-ido-find-file ()
    "Find a recent file using Ido."
    (interactive)
    (let* ((file-assoc-list
            (mapcar (lambda (x)
                      (cons (file-name-nondirectory x)
                            x))
                    recentf-list))
           (filename-list
            (remove-duplicates (mapcar #'car file-assoc-list)
                               :test #'string=))
           (filename (ido-completing-read "Choose recent file: "
                                          filename-list
                                          nil
                                          t)))
      (when filename
        (find-file (cdr (assoc filename
                               file-assoc-list))))))
 #+end_src

Set the path from the environment.

#+BEGIN_SRC emacs-lisp
;; Get path from environment!
(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell
         (replace-regexp-in-string "[[:space:]\n]*$" ""
                                   (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
#+end_src

Extra bullshit

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

(setenv "PKG_CONFIG_PATH" "/usr/local/Cellar/zlib/1.2.11/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig")

#+END_SRC
